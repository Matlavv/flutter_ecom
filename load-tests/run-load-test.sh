#!/bin/bash

# Script d'ex√©cution des tests de charge JMeter
# Usage: ./run-load-test.sh [environment] [users] [duration]

set -e

# Configuration par d√©faut
DEFAULT_ENV="production"
DEFAULT_USERS=10
DEFAULT_DURATION=300
DEFAULT_RAMP_UP=30

# Param√®tres
ENV=${1:-$DEFAULT_ENV}
USERS=${2:-$DEFAULT_USERS}
DURATION=${3:-$DEFAULT_DURATION}
RAMP_UP=${4:-$DEFAULT_RAMP_UP}

# URLs selon l'environnement
case $ENV in
  "production"|"prod")
    BASE_URL="https://flutter-app-ecom.web.app"
    ;;
  "blue")
    BASE_URL="https://flutter-app-ecom--blue-loai3kdo.web.app"
    ;;
  "green")
    BASE_URL="https://flutter-app-ecom--green-hexbm263.web.app"
    ;;
  "local")
    BASE_URL="http://localhost:8000"
    ;;
  *)
    echo "‚ùå Environnement non reconnu: $ENV"
    echo "Environnements disponibles: production, blue, green, local"
    exit 1
    ;;
esac

# V√©rification de JMeter
if ! command -v jmeter &> /dev/null; then
    echo "‚ùå JMeter n'est pas install√© ou n'est pas dans le PATH"
    echo "Installation:"
    echo "  - macOS: brew install jmeter"
    echo "  - Ubuntu: sudo apt-get install jmeter"
    echo "  - Windows: T√©l√©charger depuis https://jmeter.apache.org/"
    exit 1
fi

# Cr√©ation du dossier de r√©sultats
RESULTS_DIR="load-tests/results"
mkdir -p "$RESULTS_DIR"

# Timestamp pour les fichiers de r√©sultats
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
RESULTS_FILE="$RESULTS_DIR/load-test-$ENV-$TIMESTAMP.jtl"
REPORT_DIR="$RESULTS_DIR/html-report-$ENV-$TIMESTAMP"

echo "üöÄ D√©marrage des tests de charge"
echo "=================================="
echo "üìä Environnement: $ENV"
echo "üåê URL de base: $BASE_URL"
echo "üë• Utilisateurs: $USERS"
echo "‚è±Ô∏è  Dur√©e: ${DURATION}s"
echo "üìà Mont√©e en charge: ${RAMP_UP}s"
echo "üìÅ R√©sultats: $RESULTS_FILE"
echo "üìä Rapport HTML: $REPORT_DIR"
echo ""

# Ex√©cution du test
echo "üîÑ Ex√©cution en cours..."
jmeter -n -t load-tests/flutter-ecom-load-test.jmx \
  -JBASE_URL="$BASE_URL" \
  -JUSERS="$USERS" \
  -JDURATION="$DURATION" \
  -JRAMP_UP="$RAMP_UP" \
  -l "$RESULTS_FILE" \
  -e -o "$REPORT_DIR"

# V√©rification du succ√®s
if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ Tests de charge termin√©s avec succ√®s!"
    echo ""
    echo "üìä R√©sultats disponibles:"
    echo "  - Fichier JTL: $RESULTS_FILE"
    echo "  - Rapport HTML: $REPORT_DIR/index.html"
    echo ""
    echo "üåê Pour voir le rapport HTML:"
    echo "  open $REPORT_DIR/index.html"
    echo ""
    
    # Affichage d'un r√©sum√© rapide
    if [ -f "$RESULTS_FILE" ]; then
        echo "üìà R√©sum√© rapide:"
        echo "=================="
        TOTAL_SAMPLES=$(tail -n +2 "$RESULTS_FILE" | wc -l)
        SUCCESS_SAMPLES=$(tail -n +2 "$RESULTS_FILE" | awk -F',' '$8=="true"' | wc -l)
        ERROR_SAMPLES=$(tail -n +2 "$RESULTS_FILE" | awk -F',' '$8=="false"' | wc -l)
        
        if [ "$TOTAL_SAMPLES" -gt 0 ]; then
            SUCCESS_RATE=$(echo "scale=2; $SUCCESS_SAMPLES * 100 / $TOTAL_SAMPLES" | bc -l)
            echo "üìä Total des requ√™tes: $TOTAL_SAMPLES"
            echo "‚úÖ Succ√®s: $SUCCESS_SAMPLES ($SUCCESS_RATE%)"
            echo "‚ùå Erreurs: $ERROR_SAMPLES"
            
            # Temps de r√©ponse moyen
            AVG_RESPONSE_TIME=$(tail -n +2 "$RESULTS_FILE" | awk -F',' '{sum+=$2; count++} END {if(count>0) print int(sum/count); else print 0}')
            echo "‚è±Ô∏è  Temps de r√©ponse moyen: ${AVG_RESPONSE_TIME}ms"
        fi
    fi
else
    echo ""
    echo "‚ùå Erreur lors de l'ex√©cution des tests de charge"
    exit 1
fi

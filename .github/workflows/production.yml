name: Production Release

on:
    push:
        tags: ['v*.*.*']

    # Déclenchement manuel
    workflow_dispatch:
        inputs:
            version_name:
                description: 'Version (ex: 1.0.1)'
                required: true
                default: '1.0.1'
            version_code:
                description: 'Build number (ex: 2)'
                required: true
                default: '2'
            build_android:
                description: 'Build Android AAB'
                type: boolean
                default: true
            build_web:
                description: 'Build & Deploy Web'
                type: boolean
                default: true

env:
    FLUTTER_VERSION: '3.27.0'
    JAVA_VERSION: '17'

jobs:
    production-quality:
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🐦 Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: 📦 Install dependencies
              run: flutter pub get

            - name: 🔍 Analyze (strict)
              run: flutter analyze --fatal-infos

            - name: 🧪 Run all tests
              run: flutter test --coverage

            - name: 📊 Coverage check
              run: |
                  COVERAGE=$(lcov --summary coverage/lcov.info | grep -o 'lines......: [0-9.]*%' | grep -o '[0-9.]*')
                  echo "Coverage: $COVERAGE%"
                  if (( $(echo "$COVERAGE < 70" | bc -l) )); then
                      echo "❌ Coverage trop faible: $COVERAGE% (minimum: 70%)"
                      exit 1
                  fi
                  echo "✅ Coverage OK: $COVERAGE%"

    build-android-production:
        runs-on: ubuntu-latest
        needs: production-quality
        if: ${{ inputs.build_android != false }}

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: ☕ Setup Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: ${{ env.JAVA_VERSION }}
                  cache: 'gradle'

            - name: 🐦 Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: 📦 Install dependencies
              run: flutter pub get

            - name: 🔐 Setup Android signing
              env:
                  ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
                  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
                  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
              run: |
                  echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
                  cat > android/key.properties << EOF
                  storePassword=$KEYSTORE_PASSWORD
                  keyPassword=$KEY_PASSWORD
                  keyAlias=upload
                  storeFile=upload-keystore.jks
                  EOF

            - name: 🏗️ Build production AAB
              run: |
                  flutter build appbundle --release \
                    --target-platform android-arm,android-arm64,android-x64 \
                    --build-name=${{ inputs.version_name || github.ref_name }} \
                    --build-number=${{ inputs.version_code || github.run_number }}

            - name: 📱 Upload production AAB
              uses: actions/upload-artifact@v4
              with:
                  name: production-aab-${{ inputs.version_name || github.ref_name }}
                  path: build/app/outputs/bundle/release/app-release.aab
                  retention-days: 90

            - name: 🧹 Cleanup secrets
              if: always()
              run: |
                  rm -f android/app/upload-keystore.jks android/key.properties

    build-web-production:
        runs-on: ubuntu-latest
        needs: production-quality
        if: ${{ inputs.build_web != false }}

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🐦 Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: 📦 Install dependencies
              run: flutter pub get

            - name: 🌐 Build web (optimized)
              run: flutter build web --release

            - name: 📦 Upload web build
              uses: actions/upload-artifact@v4
              with:
                  name: production-web-${{ inputs.version_name || github.ref_name }}
                  path: build/web/
                  retention-days: 90

    release-instructions:
        runs-on: ubuntu-latest
        needs: [production-quality, build-android-production, build-web-production]
        if: always() && needs.production-quality.result == 'success'

        steps:
            - name: 📋 Release Summary
              run: |
                  echo "## 🎉 Release ${{ inputs.version_name || github.ref_name }} Ready!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 📱 Android" >> $GITHUB_STEP_SUMMARY
                  if [[ "${{ needs.build-android-production.result }}" == "success" ]]; then
                      echo "✅ **AAB de production généré**" >> $GITHUB_STEP_SUMMARY
                      echo "- Téléchargez l'artifact \`production-aab-${{ inputs.version_name || github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
                      echo "- Uploadez sur [Google Play Console](https://play.google.com/console)" >> $GITHUB_STEP_SUMMARY
                  else
                      echo "⏭️ **Build Android ignoré**" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 🌐 Web" >> $GITHUB_STEP_SUMMARY
                  if [[ "${{ needs.build-web-production.result }}" == "success" ]]; then
                      echo "✅ **Build web généré** (artifact disponible)" >> $GITHUB_STEP_SUMMARY
                  else
                      echo "⏭️ **Build Web ignoré**" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 📊 Métriques" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version**: ${{ inputs.version_name || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Build**: ${{ inputs.version_code || github.run_number }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

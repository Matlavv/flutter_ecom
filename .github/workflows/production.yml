name: Production Build & Deploy

on:
    # Déclenchement automatique sur les tags de version
    push:
        tags:
            - 'v*.*.*'

    # Déclenchement manuel
    workflow_dispatch:
        inputs:
            version_name:
                description: 'Version name (ex: 1.0.1)'
                required: true
                default: '1.0.1'
            version_code:
                description: 'Version code (ex: 2)'
                required: true
                default: '2'

jobs:
    build-production-android:
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: ☕ Setup Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: '17'

            - name: 🐦 Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.27.0'
                  channel: 'stable'

            - name: 📦 Install dependencies
              run: flutter pub get

            - name: 🧪 Run tests
              run: flutter test --coverage

            - name: 🔍 Analyze code
              run: flutter analyze

            - name: 🔐 Decode Android keystore
              env:
                  ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
              run: |
                  echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks

            - name: 📝 Create key.properties
              env:
                  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
                  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
                  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
              run: |
                  echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
                  echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
                  echo "keyAlias=$KEY_ALIAS" >> android/key.properties
                  echo "storeFile=upload-keystore.jks" >> android/key.properties

            - name: 🏗️ Build production AAB
              run: |
                  flutter build appbundle --release \
                    --target-platform android-arm,android-arm64,android-x64 \
                    --build-name=${{ github.event.inputs.version_name || '1.0.0' }} \
                    --build-number=${{ github.event.inputs.version_code || github.run_number }}

            - name: 📱 Upload AAB to artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: production-aab-${{ github.event.inputs.version_name || github.ref_name }}
                  path: build/app/outputs/bundle/release/app-release.aab
                  retention-days: 90

            - name: 📊 AAB Info
              run: |
                  echo "🎉 AAB de production généré avec succès !"
                  echo "📱 Fichier: app-release.aab"
                  echo "📏 Taille: $(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)"
                  echo "🔐 Signature: Production"
                  echo "📦 Package: com.matlav.flutter_ecom"
                  echo "🏷️ Version: ${{ github.event.inputs.version_name || github.ref_name }}"

    # Job optionnel pour upload automatique sur Play Console
    deploy-to-play-store:
        needs: build-production-android
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

        steps:
            - name: 📥 Download AAB
              uses: actions/download-artifact@v4
              with:
                  name: production-aab-${{ github.ref_name }}

            - name: 🚀 Deploy to Play Store (Internal Testing)
              uses: r0adkll/upload-google-play@v1
              with:
                  serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
                  packageName: com.matlav.flutter_ecom
                  releaseFiles: app-release.aab
                  track: internal
                  status: completed

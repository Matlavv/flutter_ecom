name: üöÄ Clean CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]
    workflow_dispatch:
        inputs:
            action:
                description: 'Action √† effectuer'
                required: true
                default: 'full-pipeline'
                type: choice
                options:
                    - full-pipeline
                    - deploy-only

env:
    FLUTTER_VERSION: '3.35.4'
    JAVA_VERSION: '17'
    PROJECT_ID: 'flutter-app-ecom'

jobs:
    # ============================================================================
    # QUALITY & TESTING
    # ============================================================================
    quality-check:
        name: üîç Quality & Tests
        runs-on: ubuntu-latest
        outputs:
            should-build: ${{ steps.check-build.outputs.should-build }}
            should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4

            - name: üê¶ Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: üì¶ Get dependencies
              run: flutter pub get

            - name: üé® Check formatting
              run: dart format --set-exit-if-changed .

            - name: üîç Analyze code
              run: flutter analyze --no-fatal-infos

            - name: üß™ Run tests with coverage
              run: flutter test --coverage

            - name: üìä Upload coverage
              uses: codecov/codecov-action@v4
              if: success()
              with:
                  file: coverage/lcov.info
                  token: ${{ secrets.CODECOV_TOKEN }}
                  fail_ci_if_error: false

            - name: ‚úÖ Check build conditions
              id: check-build
              run: |
                  if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    echo "should-build=true" >> $GITHUB_OUTPUT
                  else
                    echo "should-build=false" >> $GITHUB_OUTPUT
                  fi

            - name: ‚úÖ Check deployment conditions
              id: check-deploy
              run: |
                  if [[ "${{ github.ref }}" == "refs/heads/main" && ("${{ github.event_name }}" == "push" || "${{ github.event.inputs.action }}" == "full-pipeline" || "${{ github.event.inputs.action }}" == "deploy-only") ]]; then
                    echo "should-deploy=true" >> $GITHUB_OUTPUT
                  else
                    echo "should-deploy=false" >> $GITHUB_OUTPUT
                  fi

    # ============================================================================
    # PARALLEL BUILDS
    # ============================================================================
    build-web:
        name: üåê Build Web
        runs-on: ubuntu-latest
        needs: quality-check
        if: needs.quality-check.outputs.should-build == 'true'
        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4

            - name: üê¶ Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: üì¶ Get dependencies
              run: flutter pub get

            - name: üî® Build web
              run: flutter build web --release --web canvaskit

            - name: üì§ Upload web build
              uses: actions/upload-artifact@v4
              with:
                  name: web-build
                  path: build/web/
                  retention-days: 7

    build-android:
        name: ü§ñ Build Android (Artifact Only)
        runs-on: ubuntu-latest
        needs: quality-check
        if: needs.quality-check.outputs.should-build == 'true'
        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4

            - name: ‚òï Setup Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: ${{ env.JAVA_VERSION }}
                  cache: 'gradle'

            - name: üê¶ Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: üì¶ Get dependencies
              run: flutter pub get

            - name: üî® Build AAB
              run: flutter build appbundle --release --target-platform android-arm64

            - name: üì§ Upload AAB
              uses: actions/upload-artifact@v4
              with:
                  name: android-aab
                  path: build/app/outputs/bundle/release/app-release.aab
                  retention-days: 7

    # ============================================================================
    # LOAD TESTING
    # ============================================================================
    # load-tests:
    #     name: ‚ö° Load Tests
    #     runs-on: ubuntu-latest
    #     needs: [quality-check]
    #     if: needs.quality-check.outputs.should-load-test == 'true'
    #     steps:
    #         - name: üì• Checkout code
    #           uses: actions/checkout@v4

    #         - name: ‚òï Setup Java (for JMeter)
    #           uses: actions/setup-java@v4
    #           with:
    #               distribution: 'zulu'
    #               java-version: '11'

    #         - name: üì• Download JMeter
    #           run: |
    #               wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz
    #               tar -xzf apache-jmeter-5.6.3.tgz
    #               sudo mv apache-jmeter-5.6.3 /opt/jmeter
    #               sudo ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter

    #         - name: ‚ö° Run load tests
    #           run: |
    #               cd load-tests
    #               chmod +x run-load-test.sh
    #               ./run-load-test.sh --target https://flutter-app-ecom.web.app --users 10 --duration 60

    #         - name: üìä Upload load test results
    #           uses: actions/upload-artifact@v4
    #           if: always()
    #           with:
    #               name: load-test-results
    #               path: load-tests/results/
    #               retention-days: 7

    # ============================================================================
    # FIREBASE DEPLOYMENT (Web Only)
    # ============================================================================
    deploy:
        name: üöÄ Deploy Web to Firebase
        runs-on: ubuntu-latest
        needs: [quality-check, build-web] # Supprim√© build-android
        if: needs.quality-check.outputs.should-deploy == 'true'
        environment: production
        outputs:
            deployment-url: ${{ steps.deploy-info.outputs.deployment-url }}
            channel: ${{ steps.channel.outputs.channel }}
            preview-url: ${{ steps.smoke_tests.outputs.preview_url }}
        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4

            - name: üì§ Download web build
              uses: actions/download-artifact@v4
              with:
                  name: web-build
                  path: build/web/

            - name: üîß Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: üî• Setup Firebase CLI
              run: npm install -g firebase-tools

            - name: üéØ Determine deployment channel
              id: channel
              run: |
                  TIMESTAMP=$(date +%s)
                  if [ $((TIMESTAMP % 2)) -eq 0 ]; then
                    echo "channel=blue" >> $GITHUB_OUTPUT
                    echo "other_channel=green" >> $GITHUB_OUTPUT
                  else
                    echo "channel=green" >> $GITHUB_OUTPUT
                    echo "other_channel=blue" >> $GITHUB_OUTPUT
                  fi
                  echo "Deploying to channel: $(cat $GITHUB_OUTPUT | grep channel= | head -1 | cut -d= -f2)"

            - name: üöÄ Deploy to preview channel
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
              run: |
                  CHANNEL="${{ steps.channel.outputs.channel }}"
                  echo "üöÄ Deploying to channel: $CHANNEL"

                  firebase hosting:channel:deploy $CHANNEL \
                    --project $PROJECT_ID \
                    --expires 30d \
                    --token $FIREBASE_TOKEN

            - name: üß™ Run smoke tests
              id: smoke_tests
              run: |
                  CHANNEL="${{ steps.channel.outputs.channel }}"

                  # Utiliser les vraies URLs Firebase bas√©es sur vos exemples
                  if [ "$CHANNEL" = "blue" ]; then
                    PREVIEW_URL="https://flutter-app-ecom--blue-loai3kdo.web.app"
                  else
                    PREVIEW_URL="https://flutter-app-ecom--green-hexbm263.web.app"
                  fi

                  echo "üß™ Running smoke tests on: $PREVIEW_URL"

                  # Wait for deployment to be ready
                  sleep 45

                  # Test 1: Check if site is accessible
                  echo "Testing accessibility..."
                  STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL" || echo "000")
                  if [ "$STATUS_CODE" != "200" ]; then
                    echo "‚ùå Smoke test failed: Status code $STATUS_CODE"
                    echo "Trying alternative URL format..."
                    
                    # Fallback: essayer l'URL g√©n√©r√©e automatiquement
                    ALT_URL="https://$PROJECT_ID--$CHANNEL-$(echo $PROJECT_ID | tr '[:upper:]' '[:lower:]' | tr -d '-').web.app"
                    echo "Testing alternative URL: $ALT_URL"
                    STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$ALT_URL" || echo "000")
                    
                    if [ "$STATUS_CODE" != "200" ]; then
                      echo "‚ùå Both URLs failed. Status code: $STATUS_CODE"
                      echo "smoke_tests_passed=false" >> $GITHUB_OUTPUT
                      exit 1
                    else
                      PREVIEW_URL="$ALT_URL"
                    fi
                  fi
                  echo "‚úÖ Site is accessible (200)"

                  # Test 2: Check for Flutter content
                  echo "Testing Flutter content..."
                  CONTENT=$(curl -s "$PREVIEW_URL" || echo "")
                  if [[ ! "$CONTENT" == *"flutter"* ]] && [[ ! "$CONTENT" == *"Flutter"* ]] && [[ ! "$CONTENT" == *"main.dart.js"* ]]; then
                    echo "‚ùå Smoke test failed: Flutter content not found"
                    echo "Content preview: ${CONTENT:0:200}..."
                    echo "smoke_tests_passed=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi
                  echo "‚úÖ Flutter content detected"

                  echo "üéâ All smoke tests passed!"
                  echo "smoke_tests_passed=true" >> $GITHUB_OUTPUT
                  echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

            - name: üîÑ Promote to live
              if: steps.smoke_tests.outputs.smoke_tests_passed == 'true'
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
              run: |
                  CHANNEL="${{ steps.channel.outputs.channel }}"
                  echo "üîÑ Promoting channel $CHANNEL to live"

                  firebase hosting:clone $PROJECT_ID:$CHANNEL $PROJECT_ID:live \
                    --project $PROJECT_ID \
                    --token $FIREBASE_TOKEN

                  echo "‚úÖ Successfully promoted to live!"

            - name: üìä Set deployment info
              id: deploy-info
              run: |
                  echo "deployment-url=https://$PROJECT_ID.web.app" >> $GITHUB_OUTPUT

    # ============================================================================
    # FINAL SUMMARY
    # ============================================================================
    summary:
        name: üìã Pipeline Summary
        runs-on: ubuntu-latest
        needs: [quality-check, build-web, build-android, deploy]
        if: always() && (needs.quality-check.outputs.should-build == 'true' || needs.quality-check.outputs.should-deploy == 'true')
        steps:
            - name: üìä Generate summary
              run: |
                  echo "## üöÄ Clean CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üìã Pipeline Details:" >> $GITHUB_STEP_SUMMARY
                  echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üîç Job Results:" >> $GITHUB_STEP_SUMMARY
                  echo "- **Quality Check**: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Web Build**: ${{ needs.build-web.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Android Build**: ${{ needs.build-android.result }} (artifact only)" >> $GITHUB_STEP_SUMMARY
                  echo "- **Web Deployment**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ needs.deploy.result }}" = "success" ]; then
                    echo "### üåê Deployment URLs:" >> $GITHUB_STEP_SUMMARY
                    echo "- **Production**: ${{ needs.deploy.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
                    echo "- **Preview Channel**: ${{ needs.deploy.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
                    echo "- **Channel Used**: ${{ needs.deploy.outputs.channel }}" >> $GITHUB_STEP_SUMMARY
                  fi

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üì¶ Artifacts Available:" >> $GITHUB_STEP_SUMMARY
                  echo "- üåê **Web Build**: Ready for deployment" >> $GITHUB_STEP_SUMMARY
                  echo "- ü§ñ **Android AAB**: Ready for Play Store" >> $GITHUB_STEP_SUMMARY

name: 🚀 Complete CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]
    workflow_dispatch:
        inputs:
            action:
                description: 'Action à effectuer'
                required: true
                default: 'full-pipeline'
                type: choice
                options:
                    - full-pipeline
                    - deploy-only
                    - rollback-blue
                    - rollback-green
                    - status
                    - load-test-only

env:
    FLUTTER_VERSION: '3.35.4'
    JAVA_VERSION: '17'
    PROJECT_ID: 'flutter-app-ecom'

jobs:
    # ============================================================================
    # QUALITY & TESTING
    # ============================================================================
    quality-check:
        name: 🔍 Quality & Tests
        runs-on: ubuntu-latest
        outputs:
            should-build: ${{ steps.check-build.outputs.should-build }}
            should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🐦 Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: 📦 Get dependencies
              run: flutter pub get

            - name: 🎨 Check formatting
              run: dart format --set-exit-if-changed .

            - name: 🔍 Analyze code
              run: flutter analyze --no-fatal-infos

            - name: 🧪 Run tests with coverage
              run: flutter test --coverage

            - name: 📊 Upload coverage
              uses: codecov/codecov-action@v4
              if: success()
              with:
                  file: coverage/lcov.info
                  token: ${{ secrets.CODECOV_TOKEN }}
                  fail_ci_if_error: false

            - name: ✅ Check build conditions
              id: check-build
              run: |
                  if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    echo "should-build=true" >> $GITHUB_OUTPUT
                  else
                    echo "should-build=false" >> $GITHUB_OUTPUT
                  fi

            - name: ✅ Check deployment conditions
              id: check-deploy
              run: |
                  if [[ "${{ github.ref }}" == "refs/heads/main" && ("${{ github.event_name }}" == "push" || "${{ github.event.inputs.action }}" == "full-pipeline" || "${{ github.event.inputs.action }}" == "deploy-only") ]]; then
                    echo "should-deploy=true" >> $GITHUB_OUTPUT
                  else
                    echo "should-deploy=false" >> $GITHUB_OUTPUT
                  fi

    # ============================================================================
    # PARALLEL BUILDS
    # ============================================================================
    build-web:
        name: 🌐 Build Web
        runs-on: ubuntu-latest
        needs: quality-check
        if: needs.quality-check.outputs.should-build == 'true'
        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🐦 Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: 📦 Get dependencies
              run: flutter pub get

            - name: 🔨 Build web
              run: flutter build web --release --web-renderer canvaskit

            - name: 📤 Upload web build
              uses: actions/upload-artifact@v4
              with:
                  name: web-build
                  path: build/web/
                  retention-days: 7

    build-android:
        name: 🤖 Build Android
        runs-on: ubuntu-latest
        needs: quality-check
        if: needs.quality-check.outputs.should-build == 'true'
        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: ☕ Setup Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: ${{ env.JAVA_VERSION }}
                  cache: 'gradle'

            - name: 🐦 Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: ${{ env.FLUTTER_VERSION }}
                  channel: 'stable'
                  cache: true

            - name: 📦 Get dependencies
              run: flutter pub get

            - name: 🔨 Build AAB
              run: flutter build appbundle --release --target-platform android-arm64

            - name: 📤 Upload AAB
              uses: actions/upload-artifact@v4
              with:
                  name: android-aab
                  path: build/app/outputs/bundle/release/app-release.aab
                  retention-days: 7

    # ============================================================================
    # LOAD TESTING
    # ============================================================================
    load-tests:
        name: ⚡ Load Tests
        runs-on: ubuntu-latest
        needs: [quality-check, build-web]
        if: needs.quality-check.outputs.should-deploy == 'true' && (github.event.inputs.action == 'full-pipeline' || github.event.inputs.action == 'load-test-only')
        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: ☕ Setup Java (for JMeter)
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: '11'

            - name: 📥 Download JMeter
              run: |
                  wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz
                  tar -xzf apache-jmeter-5.6.3.tgz
                  sudo mv apache-jmeter-5.6.3 /opt/jmeter
                  sudo ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter

            - name: ⚡ Run load tests
              run: |
                  cd load-tests
                  chmod +x run-load-test.sh
                  ./run-load-test.sh --target https://flutter-app-ecom.web.app --users 10 --duration 60

            - name: 📊 Upload load test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: load-test-results
                  path: load-tests/results/
                  retention-days: 7

    # ============================================================================
    # FIREBASE DEPLOYMENT
    # ============================================================================
    deploy:
        name: 🚀 Deploy to Firebase
        runs-on: ubuntu-latest
        needs: [quality-check, build-web, build-android]
        if: needs.quality-check.outputs.should-deploy == 'true'
        environment: production
        outputs:
            deployment-url: ${{ steps.deploy-info.outputs.deployment-url }}
            channel: ${{ steps.channel.outputs.channel }}
        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📤 Download web build
              uses: actions/download-artifact@v4
              with:
                  name: web-build
                  path: build/web/

            - name: 🔧 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: 🔥 Setup Firebase CLI
              run: npm install -g firebase-tools

            - name: 🎯 Determine deployment channel
              id: channel
              run: |
                  TIMESTAMP=$(date +%s)
                  if [ $((TIMESTAMP % 2)) -eq 0 ]; then
                    echo "channel=blue" >> $GITHUB_OUTPUT
                    echo "other_channel=green" >> $GITHUB_OUTPUT
                  else
                    echo "channel=green" >> $GITHUB_OUTPUT
                    echo "other_channel=blue" >> $GITHUB_OUTPUT
                  fi
                  echo "Deploying to channel: $(cat $GITHUB_OUTPUT | grep channel= | head -1 | cut -d= -f2)"

            - name: 🚀 Deploy to preview channel
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
              run: |
                  CHANNEL="${{ steps.channel.outputs.channel }}"
                  echo "🚀 Deploying to channel: $CHANNEL"

                  firebase hosting:channel:deploy $CHANNEL \
                    --project $PROJECT_ID \
                    --expires 30d \
                    --token $FIREBASE_TOKEN

            - name: 🧪 Run smoke tests
              id: smoke_tests
              run: |
                  CHANNEL="${{ steps.channel.outputs.channel }}"
                  PREVIEW_URL="https://$PROJECT_ID--$CHANNEL-$(echo $PROJECT_ID | tr '[:upper:]' '[:lower:]' | tr -d '-').web.app"

                  echo "🧪 Running smoke tests on: $PREVIEW_URL"

                  # Wait for deployment to be ready
                  sleep 30

                  # Test 1: Check if site is accessible
                  STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL" || echo "000")
                  if [ "$STATUS_CODE" != "200" ]; then
                    echo "❌ Smoke test failed: Status code $STATUS_CODE"
                    echo "smoke_tests_passed=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi
                  echo "✅ Site is accessible (200)"

                  # Test 2: Check for Flutter content
                  CONTENT=$(curl -s "$PREVIEW_URL" || echo "")
                  if [[ ! "$CONTENT" == *"flutter"* ]] && [[ ! "$CONTENT" == *"Flutter"* ]]; then
                    echo "❌ Smoke test failed: Flutter content not found"
                    echo "smoke_tests_passed=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi
                  echo "✅ Flutter content detected"

                  echo "🎉 All smoke tests passed!"
                  echo "smoke_tests_passed=true" >> $GITHUB_OUTPUT
                  echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

            - name: 🔄 Promote to live
              if: steps.smoke_tests.outputs.smoke_tests_passed == 'true'
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
              run: |
                  CHANNEL="${{ steps.channel.outputs.channel }}"
                  echo "🔄 Promoting channel $CHANNEL to live"

                  firebase hosting:clone $PROJECT_ID:$CHANNEL $PROJECT_ID:live \
                    --project $PROJECT_ID \
                    --token $FIREBASE_TOKEN

                  echo "✅ Successfully promoted to live!"

            - name: 📊 Set deployment info
              id: deploy-info
              run: |
                  echo "deployment-url=https://$PROJECT_ID.web.app" >> $GITHUB_OUTPUT

    # ============================================================================
    # ROLLBACK OPERATIONS
    # ============================================================================
    rollback:
        name: 🔙 Rollback
        runs-on: ubuntu-latest
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'rollback-blue' || github.event.inputs.action == 'rollback-green')
        environment: production
        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🔧 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: 🔥 Setup Firebase CLI
              run: npm install -g firebase-tools

            - name: 🔙 Execute rollback
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
              run: |
                  if [ "${{ github.event.inputs.action }}" = "rollback-blue" ]; then
                    TARGET_CHANNEL="blue"
                  else
                    TARGET_CHANNEL="green"
                  fi

                  echo "🔙 Rolling back to channel: $TARGET_CHANNEL"

                  firebase hosting:clone $PROJECT_ID:$TARGET_CHANNEL $PROJECT_ID:live \
                    --project $PROJECT_ID \
                    --token $FIREBASE_TOKEN

                  echo "✅ Rollback completed successfully"

    # ============================================================================
    # STATUS CHECK
    # ============================================================================
    status:
        name: 📊 Channel Status
        runs-on: ubuntu-latest
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'status'
        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🔧 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: 🔥 Setup Firebase CLI
              run: npm install -g firebase-tools

            - name: 📊 Show channel status
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
              run: |
                  echo "📊 Firebase Hosting Channels Status:"
                  firebase hosting:channel:list --project $PROJECT_ID --token $FIREBASE_TOKEN

                  echo ""
                  echo "🔗 Available URLs:"
                  echo "- Production: https://$PROJECT_ID.web.app"
                  echo "- Blue Channel: https://$PROJECT_ID--blue-$(echo $PROJECT_ID | tr '[:upper:]' '[:lower:]' | tr -d '-').web.app"
                  echo "- Green Channel: https://$PROJECT_ID--green-$(echo $PROJECT_ID | tr '[:upper:]' '[:lower:]' | tr -d '-').web.app"

    # ============================================================================
    # FINAL SUMMARY
    # ============================================================================
    summary:
        name: 📋 Pipeline Summary
        runs-on: ubuntu-latest
        needs: [quality-check, build-web, build-android, deploy, load-tests]
        if: always() && (needs.quality-check.outputs.should-build == 'true' || needs.quality-check.outputs.should-deploy == 'true')
        steps:
            - name: 📊 Generate summary
              run: |
                  echo "## 🚀 Complete CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 📋 Pipeline Details:" >> $GITHUB_STEP_SUMMARY
                  echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 🔍 Job Results:" >> $GITHUB_STEP_SUMMARY
                  echo "- **Quality Check**: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Web Build**: ${{ needs.build-web.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Android Build**: ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Load Tests**: ${{ needs.load-tests.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Deployment**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ needs.deploy.result }}" = "success" ]; then
                    echo "### 🌐 Deployment URLs:" >> $GITHUB_STEP_SUMMARY
                    echo "- **Production**: ${{ needs.deploy.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
                    echo "- **Channel Used**: ${{ needs.deploy.outputs.channel }}" >> $GITHUB_STEP_SUMMARY
                  fi

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 📦 Artifacts:" >> $GITHUB_STEP_SUMMARY
                  echo "- 🌐 **Web Build**: Disponible pour 7 jours" >> $GITHUB_STEP_SUMMARY
                  echo "- 🤖 **Android AAB**: Disponible pour 7 jours" >> $GITHUB_STEP_SUMMARY
                  echo "- ⚡ **Load Test Results**: Disponible pour 7 jours" >> $GITHUB_STEP_SUMMARY
